"""
    –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    –í–∫–ª—é—á–∞–µ—Ç –∫–ª–∞—Å—Å—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –∞ —Ç–∞–∫–∂–µ —Ñ—É–Ω–∫—Ü–∏–∏
    –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Å–ª–æ–≤–∞–º–∏.
"""
import csv
import logging
import random

from database import Database
from config import config_logging
from buttons import translation_buttons

logger = logging.getLogger('utils')
config_logging()


class GameUtils:
    """
        –ö–ª–∞—Å—Å —Å —É—Ç–∏–ª–∏—Ç–∞–º–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.

        Attributes:
            bot (telebot.TeleBot): –û–±—ä–µ–∫—Ç Telegram-–±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.
            db (DatabaseUtils): –û–±—ä–µ–∫—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """

    def __init__(self, bot):
        self.bot = bot
        self.db = DatabaseUtils()

    def get_user_name(self, message):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –µ–≥–æ –∏–º—è.
        """
        chat_id = message.chat.id
        user_id = message.from_user.id
        user_info = self.db.search_user(user_id)
        if user_info is None:
            self.bot.send_message(chat_id, '–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?')
            self.bot.register_next_step_handler(message, self.save_user_name)
        else:
            self.bot.send_message(chat_id, '–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!!')
            self.start_game(message)

    def save_user_name(self, message):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É.

        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –µ–≥–æ –∏–º—è.
        """
        chat_id = message.chat.id
        user_id = message.from_user.id
        user_name = message.text

        self.db.save_user(user_name, user_id)

        self.bot.send_message(chat_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}!\n –î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∏–≥—Ä–∞!!")
        self.start_game(message)

    def start_game(self, message):
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É, –ø—Ä–µ–¥–ª–∞–≥–∞—è —Å–ª–æ–≤–æ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞.

        :param message: –û–±—ä–µ–∫—Ç Telegram-–±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        chat_id = message.chat.id
        word, correct_translation, text_buttons = self.word_generator(message)

        text_buttons.append(correct_translation)

        markup = translation_buttons(text_buttons)

        self.bot.send_message(chat_id, f"–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ '<b>{word}</b>'?",
                              reply_markup=markup, parse_mode="HTML")

        self.bot.register_next_step_handler_by_chat_id(chat_id, self.check_answer,
                                                       correct_translation)

    def check_answer(self, message, correct_translation):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ –≤—ã–±–æ—Ä–æ–º.
        :param correct_translation: str –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.
        """
        chat_id = message.chat.id
        user_answer = message.text

        if user_answer == correct_translation:
            self.bot.send_message(chat_id, "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å! üåü +1 –±–∞–ª–ª!")
            self.start_game(message)
        else:
            self.bot.send_message(chat_id, "–ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫. –ù–æ –Ω–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å! üíî -3 –±–∞–ª–ª–∞!")
            self.start_game(message)

    def word_generator(self, message):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞.

        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–ª–æ–≤ (–∏–∑ CSV-—Ñ–∞–π–ª–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö),
        –∞ –∑–∞—Ç–µ–º –∏–∑–≤–ª–µ–∫–∞–µ—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥. –¢–∞–∫–∂–µ –æ–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫
        –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞.

        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π
                        –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :return: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏
                 —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞.
        """
        id_user = message.from_user.id
        flag = random.randint(0, 1)
        if flag == 0:
            word_dicr = self.read_words_csv(id_user)

        else:
            word_dicr = self.read_words_bd(id_user)

        word = list(word_dicr.keys())[0]
        translation = word_dicr[word]
        text_buttons = list(word_dicr.values())[1:]
        return word, translation, text_buttons

    def read_words_csv(self, user_id: int, quantity: int = 4):
        """
            –ß–∏—Ç–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ CSV-—Ñ–∞–π–ª–∞,
            –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤–º–µ—Å—Ç–µ
            —Å –∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –∏ —É–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ CSV-—Ñ–∞–π–ª–∞.

            :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
            :param quantity: –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
                             –¥–ª—è —á—Ç–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4).

            :return words_dict: dict –°–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π
                                –∏ –∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π.
        """
        words_dict = {}
        try:
            with open('russian_english_words.csv', newline='', encoding='utf-8') as csvfile:
                reader = csv.reader(csvfile)
                words = list(reader)

            selected_words = random.sample(words[1:],
                                           len(words[1:]) if len(words[1:]) < quantity else quantity)

            for word_list in selected_words:
                check_word_bd = self.db.search_word(word_list[0])
                if check_word_bd is None:
                    self.db.save_word(word_list[0], word_list[1])

                words_dict[word_list[0]] = word_list[1]

            if len(words_dict) < quantity:
                result = self.db.get_random_words_for_user(user_id, quantity - len(words_dict))
                words_dict.update(result)

            remaining_words = [word for word in words if word not in selected_words]
            with open('russian_english_words.csv', 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                for word in remaining_words:
                    writer.writerow(word)

            return words_dict

        except Exception as e:
            logger.error(f'–æ—à–∏–±–∫–∞ {e}')
            words_dict.update(self.read_words_bd(user_id))
            return words_dict

    def read_words_bd(self, user_id):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª 4 —Ä–∞–∑–∞,
        –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –º–µ–Ω—å—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞,
        –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –∏–∑ CSV-—Ñ–∞–π–ª–∞.

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.

        :return: dict –°–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π –∏ –∏—Ö
                 –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π.
        """
        rusult = self.db.get_random_words_for_user(user_id)

        if len(rusult) < 4:
            csv_word = self.read_words_csv(user_id, 4 - len(rusult))
            rusult.update(csv_word)
        return rusult


class DatabaseUtils(Database):
    """
       –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –∫–ª–∞—Å—Å–∞ Database.
    """

    def __init__(self):
        super().__init__()

    def add_tabl(self):
        """
           –°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:
           - users: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.
           - word: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–≤–∞—Ö –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∞—Ö.
           - users_word: —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞.
       """
        table_name_user = 'users'
        columns_user = [
            ('id', 'SERIAL PRIMARY KEY'),
            ('telegram_user_id', 'BIGINT NOT NULL UNIQUE'),
            ('name', 'VARCHAR(255)'),
            ('points', 'INTEGER DEFAULT 0')
        ]

        table_name_word = 'word'
        columns_word = [
            ('id', 'SERIAL PRIMARY KEY'),
            ('russian_words', 'VARCHAR(255)'),
            ('translation', 'VARCHAR(255)'),

        ]

        table_name_user_word = 'users_word'
        columns_user_word = [
            ('id', 'SERIAL PRIMARY KEY'),
            ('user_id', 'INTEGER REFERENCES users(id) ON DELETE CASCADE'),
            ('word_id', 'INTEGER REFERENCES word(id) ON DELETE CASCADE'),
            ('times_shown', 'INTEGER DEFAULT 0')
        ]

        self.create_table(table_name_user, columns_user)
        self.create_table(table_name_word, columns_word)
        self.create_table(table_name_user_word, columns_user_word)

    def save_user(self, name, tg_user_id):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ
        –≤ —Ç–∞–±–ª–∏—Ü—É `users` –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        :param name: str –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ.
        :param tg_user_id: int –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ.
        """
        table_name = 'users'
        data = {
            'telegram_user_id': tg_user_id,
            'name': name
        }
        self.insert_data(table_name=table_name, data=data)

    def search_user(self, tg_user_id):
        """
        –ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–≥–æ Telegram ID.

        –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É `users`, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ
        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å
        –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (ID, –∏–º—è, –æ—á–∫–∏). –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `None`.

        :param tg_user_id: int –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ.

        :return: dict –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (ID, –∏–º—è, –æ—á–∫–∏) –∏–ª–∏ `None`,
                      –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        table_name = 'users'
        columns = 'id,name,points'
        values = (tg_user_id,)
        condition = 'telegram_user_id = %s'
        result = self.select_data(table_name=table_name, columns=columns,
                                  values=values, condition=condition)
        if result:
            user_info = {
                'id': result[0][0],
                'name': result[0][1],
                'points': result[0][2]
            }
        else:
            user_info = None
        return user_info

    def search_word(self, word):
        """
        –ò—â–µ—Ç —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É `word`, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ –ø–æ –µ–≥–æ —Ä—É—Å—Å–∫–æ–º—É –Ω–∞–ø–∏—Å–∞–Ω–∏—é.
        –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `None`.

        :param word: str –°–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏.

        :return: int –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ `None`, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
        """
        table_name = 'word'
        condition = 'russian_words = %s'

        result = self.select_data(table_name, 'id',
                                  condition=condition, values=(word,))
        if result:
            answer = result[0][0]
        else:
            answer = None
        return answer

    def save_word(self, word, translation):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü—É `word` –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        :param word: str –°–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        :param translation: str –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.
        """
        data = {
            'russian_words': word,
            'translation': translation
        }
        table_name = 'word'
        self.insert_data(table_name, data)

    def get_random_words_for_user(self, user_id: int, quantity: int = 4):
        """
            –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –º–µ–Ω–µ–µ
            4 —Ä–∞–∑, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.

            –§—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 4 –∏ –±–æ–ª–µ–µ —Ä–∞–∑,
            –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4).
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è,
            –≥–¥–µ –∫–ª—é—á–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∞ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.

            :param user_id: int –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
            :param quantity: int –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4).

            :return: dict –°–ª–æ–≤–∞—Ä—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –≥–¥–µ –∫–ª—é—á–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞,
                   –∞ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.
        """

        words_dict = {}
        table_name = 'word w'
        columns = 'w.russian_words, w.translation'
        condition = f"""
            w.id NOT IN (
                SELECT uw.word_id
                FROM users_word uw
                WHERE uw.user_id = {user_id}
                GROUP BY uw.word_id
                HAVING SUM(uw.times_shown) >= 4
            )
            ORDER BY RANDOM()
            LIMIT {quantity};        
        """

        result_bd_word = self.select_data(table_name=table_name,
                                          columns=columns,
                                          condition=condition
                                          )
        for words in result_bd_word:
            words_dict[words[0]] = words[1]

        return words_dict


if __name__ == '__main__':
    pass
